{
  "_args": [
    [
      {
        "raw": "shortstop@0.0.1",
        "scope": null,
        "escapedName": "shortstop",
        "name": "shortstop",
        "rawSpec": "0.0.1",
        "spec": "0.0.1",
        "type": "version"
      },
      "/Users/jhflorey/Documents/MovieRatings/node_modules/karka"
    ]
  ],
  "_from": "shortstop@0.0.1",
  "_id": "shortstop@0.0.1",
  "_inCache": true,
  "_location": "/karka/shortstop",
  "_npmUser": {
    "name": "totherik",
    "email": "totherik@gmail.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shortstop@0.0.1",
    "scope": null,
    "escapedName": "shortstop",
    "name": "shortstop",
    "rawSpec": "0.0.1",
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/karka"
  ],
  "_resolved": "https://registry.npmjs.org/shortstop/-/shortstop-0.0.1.tgz",
  "_shasum": "dd3dc10a82bce53791f63233411a36117460f7d4",
  "_shrinkwrap": null,
  "_spec": "shortstop@0.0.1",
  "_where": "/Users/jhflorey/Documents/MovieRatings/node_modules/karka",
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "bugs": {
    "url": "https://github.com/paypal/shortstop/issues"
  },
  "dependencies": {},
  "description": "Enable use of protocols (such as file:, buffer:, or method:) in configuration files.",
  "devDependencies": {
    "chai": "~1.8.0",
    "mocha": "~1.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "dd3dc10a82bce53791f63233411a36117460f7d4",
    "tarball": "https://registry.npmjs.org/shortstop/-/shortstop-0.0.1.tgz"
  },
  "homepage": "https://github.com/paypal/shortstop#readme",
  "keywords": [
    "config",
    "configuration"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "totherik",
      "email": "totherik@gmail.com"
    }
  ],
  "name": "shortstop",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "shortstop\n=========\n\n\nSometimes JSON just isn't enough for configuration needs. Occasionally it would be nice to use arbitrary types as values,\nbut JSON is necessarily a subset of all available JS types. `shortstop` enables the use of protocols and handlers to\nenable identification and special handling of json values.\n\n#### The Basics\n\n```json\n{\n    \"secret\": \"buffer:SGVsbG8sIHdvcmxkIQ==\",\n    \"ssl\": {\n        \"pfx\": \"file:foo/bar\",\n        \"key\": \"file:foo/baz.key\",\n    }\n}\n```\n\n```javascript\nvar fs = require('fs'),\n    shortstop = require('shortstop');\n\n\nfunction buffer(value) {\n    return new Buffer(value);\n}\n\n\nfunction file(value) {\n    return fs.readFileSync(value);\n}\n\n\nvar resolver, data;\nresolver = shortstop.create();\nresolver.use('buffer', buffer);\nresolver.use('file', file);\n\ndata = resolver.resolve(json);\n\n// {\n//     \"secret\": <Buffer ... >,\n//     \"ssl\" {\n//         \"pfx\": <Buffer ... >,\n//         \"key\": <Buffer ... >\n//     }\n// }\n\n```\n\n\n#### Multiple handlers\nMultiple handlers can be registered for a given protocol. They will be executed in the order registered and the output\nof one handler will be the input of the next handler in the chain.\n\n```json\n{\n    \"key\": \"file:foo/baz.key\",\n    \"certs\": \"path:certs/myapp\"\n}\n```\n\n```javascript\nvar fs = require('fs'),\n    path = require('path'),\n    shortstop = require('shortstop');\n\n\nfunction path(value) {\n    if (path.resolve(value) === value) {\n        // Is absolute path already\n        return value;\n    }\n\n    return path.join(process.cwd(), value;\n}\n\n\nfunction file(value) {\n    return fs.readFileSync(value);\n}\n\n\nvar resolver, data;\nresolver = shortstop.create();\nresolver.use('path', path);\n\nresolver.use('file', path);\nresolver.use('file', file);\n\ndata = resolver.resolve(json);\n\n// {\n//     \"key\": <Buffer ... >,\n//     \"certs\": \"/path/to/my/certs/myapp\"\n// }\n```\n\n\n#### Removing Handlers\n\nWhen registered, handlers return an `unregister` function you can call when you no longer want a handler in the chain.\n\n\n```js\n// json1\n{\n    \"key\": \"path:foo/baz.key\"\n}\n```\n\n```js\n// json2\n{\n    \"key\": \"path:foo/bar.key\"\n}\n```\n\n```javascript\nvar fs = require('fs'),\n    path = require('path'),\n    shortstop = require('shortstop');\n\n\nfunction path(value) {\n    if (path.resolve(value) === value) {\n        // Is absolute path already\n        return value;\n    }\n\n    return path.join(process.cwd(), value;\n}\n\nvar resolver, unuse, data;\n\nresolver = shortstop.create();\nunuse = resolver.use('path', path);\ndata = resolver.resolve(json1);\n\n// {\n//     \"key\": \"/path/to/my/foo/baz.key\"\n// }\n\nunuse();\n\ndata = resolver.resolve(json2);\n\n// {\n//     \"key\": \"path:foo/bar.key\"\n// }\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paypal/shortstop.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.0.1"
}
