{
  "_args": [
    [
      {
        "raw": "mongoose-search-plugin@^0.1.2",
        "scope": null,
        "escapedName": "mongoose-search-plugin",
        "name": "mongoose-search-plugin",
        "rawSpec": "^0.1.2",
        "spec": ">=0.1.2 <0.2.0",
        "type": "range"
      },
      "/Users/jhflorey/Documents/MovieRatings"
    ]
  ],
  "_from": "mongoose-search-plugin@>=0.1.2 <0.2.0",
  "_id": "mongoose-search-plugin@0.1.2",
  "_inCache": true,
  "_location": "/mongoose-search-plugin",
  "_npmUser": {
    "name": "freakycue",
    "email": "freakycue@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-search-plugin@^0.1.2",
    "scope": null,
    "escapedName": "mongoose-search-plugin",
    "name": "mongoose-search-plugin",
    "rawSpec": "^0.1.2",
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-search-plugin/-/mongoose-search-plugin-0.1.2.tgz",
  "_shasum": "7dc9e26dd9fd3c007e51f282a6d97ae1cff9b4fd",
  "_shrinkwrap": null,
  "_spec": "mongoose-search-plugin@^0.1.2",
  "_where": "/Users/jhflorey/Documents/MovieRatings",
  "author": {
    "name": "Pavel Vlasov",
    "email": "freakycue@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/freakycue/mongoose-search-plugin/issues"
  },
  "dependencies": {
    "natural": "~0.1.25",
    "underscore": "~1.5.2"
  },
  "description": "mongoose full-text search plugin",
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.17.1",
    "mongoose": "~3.8.6"
  },
  "directories": {},
  "dist": {
    "shasum": "7dc9e26dd9fd3c007e51f282a6d97ae1cff9b4fd",
    "tarball": "https://registry.npmjs.org/mongoose-search-plugin/-/mongoose-search-plugin-0.1.2.tgz"
  },
  "homepage": "https://github.com/freakycue/mongoose-search-plugin#readme",
  "keywords": [
    "mongoose",
    "search",
    "plugin",
    "full",
    "text"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "freakycue",
      "email": "freakycue@gmail.com"
    }
  ],
  "name": "mongoose-search-plugin",
  "optionalDependencies": {},
  "readme": "# Mongoose full-text search plugin\n\nSimple mongoose plugin for full text search.\nUses [natural](https://github.com/NaturalNode/natural) stemming and distance algorythms.\n\n## Example\n``` js\n  var mongoose = require('mongoose'),\n    searchPlugin = require('mongoose-search-plugin');\n\n  var Schema = mongoose.Schema({\n    title: String,\n    descirption: String,\n    tags: [String]\n  });\n\n  Schema.plugin(searchPlugin, {\n    fields: ['title', 'description', 'tags']\n  });\n\n  var Model = mongoose.model('MySearchModel', Schema);\n  Model.search('some query', {title: 1}, {\n    conditions: {title: {$exists: true}},\n    sort: {title: 1},\n    limit: 10\n  }, function(err, data) {\n    // array of finded results\n    console.log(data.results);\n    // count of all matching objects\n    console.log(data.totalCount);\n  });\n```\n\n## Installation\n``` bash\n  $ npm install mongoose-search-plugin --save\n```\n\n## Usage\n\n### Initialization\n`plugin` accepts options argument with following format:\n``` js\n  var options = {\n    keywordsPath: '_keywords', // path for keywords, `_keywords` as default\n    relevancePath: '_relevance', // path for relevance number, '_relevance' as default\n    fields: [], // array of fields to use as keywords (can be String or [String] types),\n    stemmer: 'PorterStemmer', // natural stemmer, PorterStemmer as default\n    distance: 'JaroWinklerDistance' // distance algorythm, JaroWinklerDistance as default\n  };\n  Schema.plugin(searchPlugin(options));\n```\n\n### Search\n`Model.search(query, fields, options, callback)` options are optional.\nMethod will return object of the following format:\n``` js\n  {\n    results: [], // array of results objects\n    totalCount: 0 // number of objects, that matched criteries\n  }\n```\nOptions has following format:\n```js\n  {\n    conditions: {}, // criteria for query\n    sort: {} // sorting parameters\n    populate: [{path: '', fields: ''}], // array of paths to populate\n    ... and other options of Model.find method\n  }\n```\nBy default results sorts by relevance field, that defined in `relevancePath`\nplugin option.\n\n### Set keywords\nIf You start using plugin on existing database to initialize keywords field in object\nuse `setKeywords` method.\n``` js\n  Model.setKeywords(function(err) {\n    // ...\n  });\n```\n\n### License: MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/freakycue/mongoose-search-plugin.git"
  },
  "scripts": {
    "test": "mocha test/index.js"
  },
  "version": "0.1.2"
}
