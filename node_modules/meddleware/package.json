{
  "_args": [
    [
      {
        "raw": "meddleware@^3.0.2",
        "scope": null,
        "escapedName": "meddleware",
        "name": "meddleware",
        "rawSpec": "^3.0.2",
        "spec": ">=3.0.2 <4.0.0",
        "type": "range"
      },
      "/Users/jhflorey/Documents/MovieRatings/node_modules/kraken-js"
    ]
  ],
  "_from": "meddleware@>=3.0.2 <4.0.0",
  "_id": "meddleware@3.0.3",
  "_inCache": true,
  "_location": "/meddleware",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "jasisk",
    "email": "jasisk@gmail.com"
  },
  "_npmVersion": "2.12.1",
  "_phantomChildren": {
    "tape": "2.3.3"
  },
  "_requested": {
    "raw": "meddleware@^3.0.2",
    "scope": null,
    "escapedName": "meddleware",
    "name": "meddleware",
    "rawSpec": "^3.0.2",
    "spec": ">=3.0.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/kraken-js"
  ],
  "_resolved": "https://registry.npmjs.org/meddleware/-/meddleware-3.0.3.tgz",
  "_shasum": "1425250b340107d7025368941fae73cd5e731925",
  "_shrinkwrap": null,
  "_spec": "meddleware@^3.0.2",
  "_where": "/Users/jhflorey/Documents/MovieRatings/node_modules/kraken-js",
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "bugs": {
    "url": "https://github.com/krakenjs/meddleware/issues"
  },
  "dependencies": {
    "caller": "0.0.1",
    "core-util-is": "^1.0.1",
    "debuglog": "0.0.4"
  },
  "description": "Configuration-based middleware registration for express.",
  "devDependencies": {
    "body-parser": "^1.0.2",
    "cookie-parser": "^1.0.1",
    "express": "^4.6.1",
    "istanbul": "^0.2.7",
    "jshint": "^2.5.0",
    "morgan": "^1.0.0",
    "serve-favicon": "^2.0.1",
    "serve-static": "^1.0.4",
    "shortstop": "^1.0.1",
    "shortstop-handlers": "^1.0.0",
    "shortstop-regex": "0.0.1",
    "supertest": "^0.11.0",
    "tape": "^2.12.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "1425250b340107d7025368941fae73cd5e731925",
    "tarball": "https://registry.npmjs.org/meddleware/-/meddleware-3.0.3.tgz"
  },
  "gitHead": "06fb02387b14471368d605df0da5d8a3eb7d44a5",
  "homepage": "https://github.com/krakenjs/meddleware",
  "keywords": [
    "express",
    "middleware"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "totherik",
      "email": "totherik@gmail.com"
    },
    {
      "name": "jasisk",
      "email": "jasisk@gmail.com"
    }
  ],
  "name": "meddleware",
  "optionalDependencies": {},
  "readme": "meddleware\n==========\n\nLead Maintainer: [Jean-Charles Sisk](https://github.com/jasisk)  \n\n[![Build Status](https://travis-ci.org/krakenjs/meddleware.svg?branch=v3.x)](https://travis-ci.org/krakenjs/meddleware)  \n\n\nConfiguration-based middleware registration for express.\n\nNote: `meddleware >=1.0` is only compatible with `express >=4.0`. For `express 3.x` support, please use `meddleware 0.1.x`.\n\n#### Usage\n```javascript\nvar http = require('http'),\n    express = require('express'),\n    meddleware = require('meddleware'),\n    config = require('shush')('./config/middleware');\n\nvar app = express();\napp.use(meddleware(config)); // or app.use('/foo', meddleware(config));\nhttp.createServer(app).listen(8080);\n\n```\n\n\n#### Configuration\n`meddleware` configuration consists of an object containing properties for each of the middleware to be registered.\n```json\n{\n    \"favicon\": {\n        \"enabled\": true,\n        \"priority\": 10,\n        \"module\": \"static-favicon\"\n    },\n\n    \"static\": {\n        \"enabled\": true,\n        \"priority\": 20,\n        \"module\": {\n            \"name\": \"serve-static\",\n            \"arguments\": [ \"public\" ]\n        }\n    },\n\n    \"custom\": {\n        \"enabled\": true,\n        \"priority\": 30,\n        \"route\": \"/foo\",\n        \"module\": {\n            \"name\": \"./lib/middleware\",\n            \"method\": \"customMiddleware\",\n            \"arguments\": [ \"foo\", { \"bar\": \"baz\" } ]\n        }\n    },\n\n    \"security\": {\n        \"enabled\": true,\n        \"priority\": 40,\n        \"route\": [ \"/foo\", \"/bar\" ],\n        \"module\": {\n            \"name\": \"./lib/security\",\n            \"arguments\": [ { \"maximum\": true } ]\n        }\n    },\n\n    \"cookieParser\": {\n        \"enabled\": false,\n        \"priority\": 50,\n        \"module\": {\n            \"name\": \"cookie-parser\",\n            \"arguments\": [ \"keyboard cat\" ]\n        }\n    },\n\n    \"misc\": {\n        \"priority\": 60,\n        \"parallel\": {\n            \"user\": {\n                \"enabled\": true,\n                \"module\": {\n                    \"name\": \"the-module\",\n                    \"arguments\": []\n                }\n            },\n        }\n    }\n}\n\n```\n\n#### Options\n- `enabled` (*boolean*) - Set to `true` to enable middleware, `false` to disable. This option also supports enabling and disabling middleware at runtime. Defaults to `true`.\n\n- `priority` (*number*) - The weight to give a particular piece of middleware when sorting for registration. Lower numbers\nare registered first, while higher numbers are registered later. If `priority` is not a number, this setting defaults\nto `Number.MIN_VALUE`.\n\n- `module` (*object* **or** *string*) - The name or definition of the module to load containing the middleware implementation. Can be an installed module or a path to a module file within your project/application.\n\n    - `name` (*string*) - The name of the module or path to local module.\n\n    - `method` (*string*, optional) - The method on the provided module upon which invocation will create the middleware function to register. If a factory method is not provided, it defaults to the name of the current middleware being processed, and finally back to the module itself.\n\n    - `arguments` (*array*, optional) - An array of arguments to pass to the middleware factory.\n\n- `route` (*string* **or** *array* **or** *regexp*, optional) - An express route against which the middleware should be registered. Can be a string or a regular expression, or an array consisting of strings and regular expressions.\n\n  ##### Caveats\n\n  1. If configuring meddleware with json files, you'll need to use something like [shortstop](https://github.com/krakenjs/shortstop) with [shortstop-regex](https://github.com/jasisk/shortstop-regex) to convert a `string` to `RegExp`.\n\n  2. String paths will be automatically prefixed with any `mountpath` but regular expressions will not.\n\n    ``` js\n    var config = {\n      myMiddleware: {\n        module: './myMiddleware',\n        route: '/foo'\n      },\n      otherMiddleware: {\n        module: './otherMiddleware',\n        route: /^\\/bar$/i\n      }\n    }\n\n    app.use('/baz', meddleware(config));\n\n    // `myMiddleware` will run on `/baz/foo`\n    // `otherMiddleware` will run on `/bar`\n    ```\n\n\n- `parallel` (*object*, optional) - A meddleware configuration object containing middleware which should be executed in parallel, proceeding only when all have completed.\n\n- `race` (*object*, optional) - A meddleware configuration object containing middleware which should be executed in parallel, but will proceed when the first one completes.\n\n- `fallback` (*object*, optional) - A meddleware configuration object containing middleware which should be executed sequentially, proceeding upon first successfully resolved middleware, falling back in the event of a failure.\n\n\n#### Express App Events\nAlong with registration, consumers can be notified of registration events. **NOTE: These events are *only* triggered for\nthe middleware that is registered via `meddleware`.** All middleware events receive the following eventargs object:\n```javascript\n{\n   app: [object Object], // express app\n   config: [object Object] // config object for the current middleware\n}\n```\nThere are 4 types of events one can subscribe to:\n\n- `middleware:before` - Subscribe to this event to be notified immediately before every middleware registration. The event handler\nwill receive an eventargs object containing 2 properties: `app` being the express application against which the middleware\nwas registered, and `config` being the configuration object used in registering the middleware.\n\n\n- `middleware:before:{name}` - Subscribe to this event to be notified immediately before registration of the named middleware. The event handler\nwill receive an eventargs object containing 2 properties: `app` being the express application against which the middleware\nwas registered, and `config` being the configuration object used in registering the middleware.\n\n\n- `middleware:after` - Subscribe to this event to be notified immediately after every middleware registration. The event handler\nwill receive an eventargs object containing 2 properties: `app` being the express application against which the middleware\nwas registered, and `config` being the configuration object used in registering the middleware.\n\n\n- `middleware:after:{name}` - Subscribe to this event to be notified immediately after registration of the named middleware. The event handler\nwill receive an eventargs object containing 2 properties: `app` being the express application against which the middleware\nwas registered, and `config` being the configuration object used in registering the middleware.\n\n```javascript\nvar express = require('express'),\n    meddle = require('meddleware'),\n    config = require('shush')('./config/middleware');\n\napp = express();\n\napp.on('middleware:before', function (eventargs) {\n    console.log(eventargs.config.name); // depends on which middleware is about to be registered\n});\n\napp.on('middleware:before:session', function (eventargs) {\n    console.log(eventargs.config.name); // 'session'\n});\n\napp.on('middleware:after:session', function (eventargs) {\n    console.log(eventargs.config.name); // session\n});\n\napp.on('middleware:after', function (eventargs) {\n    console.log(eventargs.config.name); // depends on which middleware is about to be registered\n});\n\napp.use(meddle(config));\n```\n\n#### Middleware Flow Control\nTo manage groups of middleware, there is support for `parallel`, `race`, and `fallback`, which allow you to register\nmiddleware intended to be run using each type of flow control. Additionally, these registration types are composable.\n\n##### Parallel\nMiddleware designated as `parallel` will all be executed simultaneously, continuing processing of the remaining middleware stack only when all have completed.\n```json\n{\n     \"cookieParser\": {\n         \"enabled\": false,\n         \"priority\": 10,\n         \"module\": {\n            \"name\": \"cookie-parser\",\n            \"arguments\": [ \"keyboard cat\" ]\n        }\n     },\n\n    \"setup\": {\n        \"enabled\": true,\n        \"priority\": 20,\n        \"parallel\": {\n            \"service1\": {\n                \"enabled\": true,\n                \"module\": \"./lib/middleware/service1\"\n            },\n            \"service2\": {\n                \"enabled\": true,\n                \"module\": \"./lib/middleware/service2\"\n            },\n            \"service3\": {\n                \"enabled\": true,\n                \"module\": \"./lib/middleware/service3\"\n            }\n        }\n    },\n\n    \"json\": {\n        \"enabled\": true,\n        \"priority\": 30,\n        \"module\": {\n            \"name\": \"body-parser\",\n            \"method\": \"json\"\n        }\n    }\n```\n\n##### Race\nMiddleware designated as `race` will all be executed simultaneously, continuing processing of the remaining middleware stack when the *first* has completed.\n```json\n{\n     \"cookieParser\": {\n         \"enabled\": false,\n         \"priority\": 10,\n         \"module\": {\n            \"name\": \"cookie-parser\",\n            \"arguments\": [ \"keyboard cat\" ]\n         }\n     },\n\n    \"setup\": {\n        \"enabled\": true,\n        \"priority\": 20,\n        \"race\": {\n            \"service1a\": {\n                \"enabled\": true,\n                \"module\": \"./lib/middleware/service1a\"\n            },\n            \"service1b\": {\n                \"enabled\": true,\n                \"module\": \"./lib/middleware/service1b\"\n            }\n        }\n    },\n\n    \"json\": {\n        \"enabled\": true,\n        \"priority\": 30,\n        \"module\": {\n            \"name\": \"body-parser\",\n            \"method\": \"json\"\n        }\n    }\n```\n\n##### Fallback\nMiddleware designated as `fallback` will execute each middleware in series until one completes successfully.\n```json\n{\n     \"cookieParser\": {\n         \"enabled\": false,\n         \"priority\": 10,\n         \"module\": {\n             \"name\": \"cookie-parser\",\n             \"arguments\": [ \"keyboard cat\" ]\n         }\n     },\n\n    \"setup\": {\n        \"enabled\": true,\n        \"priority\": 20,\n        \"fallback\": {\n            \"primaryService\": {\n                \"enabled\": true,\n                \"priority\": 10,\n                \"module\": \"./lib/middleware/primaryService\"\n            },\n            \"secondaryService\": {\n                \"enabled\": true,\n                \"priority\": 20,\n                \"module\": \"./lib/middleware/secondaryService\"\n            }\n        }\n    },\n\n    \"json\": {\n        \"enabled\": true,\n        \"priority\": 30,\n        \"module\": {\n            \"name\": \"body-parser\",\n            \"method\": \"json\"\n        }\n    }\n```\n\n#### Tests\n```bash\n$ npm test\n```\n\n#### Coverage\n````bash\n$ npm run cover && open coverage/lcov-report/index.html\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/krakenjs/meddleware.git"
  },
  "scripts": {
    "cover": "istanbul cover tape -- test/*.js",
    "dryrun": "(TARBALL=`npm pack` ; tar ztvf $TARBALL ; rm -f $TARBALL)",
    "lint": "jshint -c .jshintrc index.js",
    "test": "tape test/*.js"
  },
  "version": "3.0.3"
}
