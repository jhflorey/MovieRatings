{
  "_args": [
    [
      {
        "raw": "bundalo@^0.2.9",
        "scope": null,
        "escapedName": "bundalo",
        "name": "bundalo",
        "rawSpec": "^0.2.9",
        "spec": ">=0.2.9 <0.3.0",
        "type": "range"
      },
      "/Users/jhflorey/Documents/MovieRatings/node_modules/makara"
    ]
  ],
  "_from": "bundalo@>=0.2.9 <0.3.0",
  "_id": "bundalo@0.2.10",
  "_inCache": true,
  "_location": "/bundalo",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "aredridel",
    "email": "aredridel@dinhe.net"
  },
  "_npmVersion": "2.13.1",
  "_phantomChildren": {
    "core-util-is": "1.0.2"
  },
  "_requested": {
    "raw": "bundalo@^0.2.9",
    "scope": null,
    "escapedName": "bundalo",
    "name": "bundalo",
    "rawSpec": "^0.2.9",
    "spec": ">=0.2.9 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/makara"
  ],
  "_resolved": "https://registry.npmjs.org/bundalo/-/bundalo-0.2.10.tgz",
  "_shasum": "ad44eb5a4e136b9b6a6b7abb19c36965782031cf",
  "_shrinkwrap": null,
  "_spec": "bundalo@^0.2.9",
  "_where": "/Users/jhflorey/Documents/MovieRatings/node_modules/makara",
  "author": {
    "name": "Matt Edelman",
    "email": "medelman@paypal.com"
  },
  "bugs": {
    "url": "https://github.com/krakenjs/bundalo/issues"
  },
  "contributors": [
    {
      "name": "Chris Vaughan",
      "email": "cvaughan@paypal.com"
    },
    {
      "name": "Aria Stewart",
      "email": "ariastewart@paypal.com"
    }
  ],
  "dependencies": {
    "async": "^1.3.0",
    "debuglog": "^1.0.1",
    "dustjs-linkedin": "~2.7.2",
    "file-resolver": "^1.0.0",
    "freshy": "^1.0.0",
    "iferr": "^0.1.5",
    "lodash": "^3.10.0",
    "spud": "^2.0.1",
    "verror": "^1.6.0"
  },
  "description": "Extract/cache/render property files/strings using i18n rules and various rendering engines",
  "devDependencies": {
    "eslint": "^0.24.1",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "ad44eb5a4e136b9b6a6b7abb19c36965782031cf",
    "tarball": "https://registry.npmjs.org/bundalo/-/bundalo-0.2.10.tgz"
  },
  "gitHead": "bb42266ec872924b7055c801661d14a692b0d898",
  "homepage": "https://github.com/krakenjs/bundalo",
  "keywords": [
    "node.js",
    "renderer"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "grawk",
      "email": "mattedelman@gmail.com"
    },
    {
      "name": "aredridel",
      "email": "aredridel@nbtsc.org"
    }
  ],
  "name": "bundalo",
  "optionalDependencies": {},
  "readme": "bundalo\n======\nLead Maintainer: [Aria Stewart](https://github.com/aredridel)  \n\nExtract/cache/render property files/strings using i18n rules and various rendering engines\n\n[![Build Status](https://travis-ci.org/krakenjs/bundalo.svg?branch=master)](https://travis-ci.org/krakenjs/bundalo)\n\n## Use cases\n\n### Initialize bundalo\n\nCall bundalo module with a key that matches your template engine, plus locale information.\nCurrently only dust and none are supported as engines.\n\n```javascript\nvar bundalo = require('bundalo');\n\n//couple of configs for later\nvar config = {\n\t\"contentPath\": \"locales/\", //required\n\t\"fallback\": \"en-US\",       //optional\n\t\"engine\": \"dust\",          //required\n\t\"cache\": false             //optional, default is true\n};\nvar config2 = {\n\t\"contentPath\": \"globals/\",\n\t\"fallback\": \"\",\n\t\"engine\": \"none\"\n};\n\n//create two bundalo instances. Each has its own cache\nvar bundle = bundalo(config);\nvar bundle2 = bundalo(config);\n\n```\n\n### Use bundalo\n\nUser wants key/values from some bundle file, corrected for locality, and possibly rendered with some data model\n\n```javascript\nbundle.get({'bundle': 'errors/server','locality': 'en-US', 'model': {'name': 'Will Robinson'}}, function bundaloReturn(err, data) {\n\tconsole.log(\"what'd we get from bundalo.get?\", data, err);\n\tcb({\n\t\t'err': data.error\n\t});\n});\n```\n\nUser wants multiple bundles in a single call, to avoid calling bundalo multiple times\n\n```javascript\nbundle.get({'bundle': ['errors/server', 'errors/client'], 'locality': 'en-US',  'model': {'name': 'Will Robinson'}}, function bundaloReturn(err, data) {\n\tconsole.log(\"what'd we get from bundalo.get?\", data, err);\n\tcb({\n\t\t'clienterr': data['errors/client'].error,\n\t\t'servererr': data['errors/server'].error\n\t});\n});\n```\n\nUser wants multiple bundles in a single call, and wants to alias the bundles for easier management upon return\n\n```javascript\nbundle.get('bundle': {\n\t'server': 'errors/server',\n\t'client': 'errors/client'\n}, 'locality': 'en-US', 'model': {'name': 'Will Robinson'}}, function bundaloReturn(err, data) {\n\tconsole.log(\"what'd we get from bundalo.get?\", data, err);\n\tcb({\n\t\t'clienterr': data.client.error,\n\t\t'servererr': data.server.error\n\t});\n});\n```\n\n## Design\n\nWhen a user first requests a bundle, bundalo will:\n* fetch the correct file from the file system based on locality\n* [dust only] compile the properties file into a dust template\n* cache the [compiled dust] template\n* [dust only] render the template with any provided data model\n* deserialize the rendered properties file via spud\n* return a JSON data object with the rendered  values\n\nUpon subsequent requests for a bundle, the previously cached compiled template will be re-rendered and returned.\nCache will be based upon the bundle path provided by the user, plus the locality path information.\nI.e. 'US/en/foo/bar' is a separate cached object from 'DE/de/foo/bar'.\nCache is consistent per bundalo instance created.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/krakenjs/bundalo.git"
  },
  "scripts": {
    "pretest": "eslint .",
    "test": "mocha"
  },
  "version": "0.2.10"
}
